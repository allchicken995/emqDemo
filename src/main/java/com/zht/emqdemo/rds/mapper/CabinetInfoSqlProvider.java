package com.zht.emqdemo.rds.mapper;

import com.zht.emqdemo.rds.model.CabinetInfo;
import com.zht.emqdemo.rds.model.CabinetInfoCriteria.Criteria;
import com.zht.emqdemo.rds.model.CabinetInfoCriteria.Criterion;
import com.zht.emqdemo.rds.model.CabinetInfoCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class CabinetInfoSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String countByExample(CabinetInfoCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("cabinet_info");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String deleteByExample(CabinetInfoCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("cabinet_info");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String insertSelective(CabinetInfo record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("cabinet_info");
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }
        
        if (record.getPowerOne() != null) {
            sql.VALUES("power_one", "#{powerOne,jdbcType=INTEGER}");
        }
        
        if (record.getPowerTwo() != null) {
            sql.VALUES("power_two", "#{powerTwo,jdbcType=INTEGER}");
        }
        
        if (record.getPowerThree() != null) {
            sql.VALUES("power_three", "#{powerThree,jdbcType=INTEGER}");
        }
        
        if (record.getTemperatureOne() != null) {
            sql.VALUES("temperature_one", "#{temperatureOne,jdbcType=DECIMAL}");
        }
        
        if (record.getTemperatureTwo() != null) {
            sql.VALUES("temperature_two", "#{temperatureTwo,jdbcType=DECIMAL}");
        }
        
        if (record.getTemperatureThree() != null) {
            sql.VALUES("temperature_three", "#{temperatureThree,jdbcType=DECIMAL}");
        }
        
        if (record.getValueOne() != null) {
            sql.VALUES("value_one", "#{valueOne,jdbcType=INTEGER}");
        }
        
        if (record.getValueTwo() != null) {
            sql.VALUES("value_two", "#{valueTwo,jdbcType=INTEGER}");
        }
        
        if (record.getValueThree() != null) {
            sql.VALUES("value_three", "#{valueThree,jdbcType=DECIMAL}");
        }
        
        if (record.getValueFour() != null) {
            sql.VALUES("value_four", "#{valueFour,jdbcType=DECIMAL}");
        }
        
        if (record.getDeviceName() != null) {
            sql.VALUES("device_name", "#{deviceName,jdbcType=VARCHAR}");
        }
        
        if (record.getDeviceKey() != null) {
            sql.VALUES("device_key", "#{deviceKey,jdbcType=VARCHAR}");
        }
        
        if (record.getTenantId() != null) {
            sql.VALUES("tenant_id", "#{tenantId,jdbcType=VARCHAR}");
        }
        
        if (record.getAlarmValueOne() != null) {
            sql.VALUES("alarm_value_one", "#{alarmValueOne,jdbcType=INTEGER}");
        }
        
        if (record.getAlarmValueTwo() != null) {
            sql.VALUES("alarm_value_two", "#{alarmValueTwo,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String selectByExample(CabinetInfoCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("status");
        sql.SELECT("power_one");
        sql.SELECT("power_two");
        sql.SELECT("power_three");
        sql.SELECT("temperature_one");
        sql.SELECT("temperature_two");
        sql.SELECT("temperature_three");
        sql.SELECT("value_one");
        sql.SELECT("value_two");
        sql.SELECT("value_three");
        sql.SELECT("value_four");
        sql.SELECT("device_name");
        sql.SELECT("device_key");
        sql.SELECT("tenant_id");
        sql.SELECT("alarm_value_one");
        sql.SELECT("alarm_value_two");
        sql.FROM("cabinet_info");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CabinetInfo record = (CabinetInfo) parameter.get("record");
        CabinetInfoCriteria example = (CabinetInfoCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("cabinet_info");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }
        
        if (record.getPowerOne() != null) {
            sql.SET("power_one = #{record.powerOne,jdbcType=INTEGER}");
        }
        
        if (record.getPowerTwo() != null) {
            sql.SET("power_two = #{record.powerTwo,jdbcType=INTEGER}");
        }
        
        if (record.getPowerThree() != null) {
            sql.SET("power_three = #{record.powerThree,jdbcType=INTEGER}");
        }
        
        if (record.getTemperatureOne() != null) {
            sql.SET("temperature_one = #{record.temperatureOne,jdbcType=DECIMAL}");
        }
        
        if (record.getTemperatureTwo() != null) {
            sql.SET("temperature_two = #{record.temperatureTwo,jdbcType=DECIMAL}");
        }
        
        if (record.getTemperatureThree() != null) {
            sql.SET("temperature_three = #{record.temperatureThree,jdbcType=DECIMAL}");
        }
        
        if (record.getValueOne() != null) {
            sql.SET("value_one = #{record.valueOne,jdbcType=INTEGER}");
        }
        
        if (record.getValueTwo() != null) {
            sql.SET("value_two = #{record.valueTwo,jdbcType=INTEGER}");
        }
        
        if (record.getValueThree() != null) {
            sql.SET("value_three = #{record.valueThree,jdbcType=DECIMAL}");
        }
        
        if (record.getValueFour() != null) {
            sql.SET("value_four = #{record.valueFour,jdbcType=DECIMAL}");
        }
        
        if (record.getDeviceName() != null) {
            sql.SET("device_name = #{record.deviceName,jdbcType=VARCHAR}");
        }
        
        if (record.getDeviceKey() != null) {
            sql.SET("device_key = #{record.deviceKey,jdbcType=VARCHAR}");
        }
        
        if (record.getTenantId() != null) {
            sql.SET("tenant_id = #{record.tenantId,jdbcType=VARCHAR}");
        }
        
        if (record.getAlarmValueOne() != null) {
            sql.SET("alarm_value_one = #{record.alarmValueOne,jdbcType=INTEGER}");
        }
        
        if (record.getAlarmValueTwo() != null) {
            sql.SET("alarm_value_two = #{record.alarmValueTwo,jdbcType=INTEGER}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("cabinet_info");
        
        sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("power_one = #{record.powerOne,jdbcType=INTEGER}");
        sql.SET("power_two = #{record.powerTwo,jdbcType=INTEGER}");
        sql.SET("power_three = #{record.powerThree,jdbcType=INTEGER}");
        sql.SET("temperature_one = #{record.temperatureOne,jdbcType=DECIMAL}");
        sql.SET("temperature_two = #{record.temperatureTwo,jdbcType=DECIMAL}");
        sql.SET("temperature_three = #{record.temperatureThree,jdbcType=DECIMAL}");
        sql.SET("value_one = #{record.valueOne,jdbcType=INTEGER}");
        sql.SET("value_two = #{record.valueTwo,jdbcType=INTEGER}");
        sql.SET("value_three = #{record.valueThree,jdbcType=DECIMAL}");
        sql.SET("value_four = #{record.valueFour,jdbcType=DECIMAL}");
        sql.SET("device_name = #{record.deviceName,jdbcType=VARCHAR}");
        sql.SET("device_key = #{record.deviceKey,jdbcType=VARCHAR}");
        sql.SET("tenant_id = #{record.tenantId,jdbcType=VARCHAR}");
        sql.SET("alarm_value_one = #{record.alarmValueOne,jdbcType=INTEGER}");
        sql.SET("alarm_value_two = #{record.alarmValueTwo,jdbcType=INTEGER}");
        
        CabinetInfoCriteria example = (CabinetInfoCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(CabinetInfo record) {
        SQL sql = new SQL();
        sql.UPDATE("cabinet_info");
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }
        
        if (record.getPowerOne() != null) {
            sql.SET("power_one = #{powerOne,jdbcType=INTEGER}");
        }
        
        if (record.getPowerTwo() != null) {
            sql.SET("power_two = #{powerTwo,jdbcType=INTEGER}");
        }
        
        if (record.getPowerThree() != null) {
            sql.SET("power_three = #{powerThree,jdbcType=INTEGER}");
        }
        
        if (record.getTemperatureOne() != null) {
            sql.SET("temperature_one = #{temperatureOne,jdbcType=DECIMAL}");
        }
        
        if (record.getTemperatureTwo() != null) {
            sql.SET("temperature_two = #{temperatureTwo,jdbcType=DECIMAL}");
        }
        
        if (record.getTemperatureThree() != null) {
            sql.SET("temperature_three = #{temperatureThree,jdbcType=DECIMAL}");
        }
        
        if (record.getValueOne() != null) {
            sql.SET("value_one = #{valueOne,jdbcType=INTEGER}");
        }
        
        if (record.getValueTwo() != null) {
            sql.SET("value_two = #{valueTwo,jdbcType=INTEGER}");
        }
        
        if (record.getValueThree() != null) {
            sql.SET("value_three = #{valueThree,jdbcType=DECIMAL}");
        }
        
        if (record.getValueFour() != null) {
            sql.SET("value_four = #{valueFour,jdbcType=DECIMAL}");
        }
        
        if (record.getDeviceName() != null) {
            sql.SET("device_name = #{deviceName,jdbcType=VARCHAR}");
        }
        
        if (record.getDeviceKey() != null) {
            sql.SET("device_key = #{deviceKey,jdbcType=VARCHAR}");
        }
        
        if (record.getTenantId() != null) {
            sql.SET("tenant_id = #{tenantId,jdbcType=VARCHAR}");
        }
        
        if (record.getAlarmValueOne() != null) {
            sql.SET("alarm_value_one = #{alarmValueOne,jdbcType=INTEGER}");
        }
        
        if (record.getAlarmValueTwo() != null) {
            sql.SET("alarm_value_two = #{alarmValueTwo,jdbcType=INTEGER}");
        }
        
        sql.WHERE("id = #{id,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table cabinet_info
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, CabinetInfoCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}